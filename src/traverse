underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->changeScene(osgOceanScene::CLEAR);
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterFog(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterDiffuse(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterAttenuation(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->changeScene(osgOceanScene::DUSK);
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterFog(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterDiffuse(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterAttenuation(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->changeScene(osgOceanScene::CLOUDY);
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterFog(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterDiffuse(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->getOceanScene()->setUnderwaterAttenuation(
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->localizedWorld->accept(finder);
underwater_simulation/uwsim/include/uwsim/EventHandler.h:          _scene->localizedWorld->accept(finder);
underwater_simulation/uwsim/include/uwsim/EventHandler.h:                _scene->localizedWorld->addChild(_sceneBuilder->objects[i]->getParent(0)->getParent(0));
underwater_simulation/uwsim/include/uwsim/EventHandler.h:                _scene->localizedWorld->addChild(_sceneBuilder->objects[i]->getParent(0)->getParent(0));
underwater_simulation/uwsim/src/ROSSceneBuilder.cpp:  scene->localizedWorld->addChild(markers);
underwater_simulation/uwsim/src/ROSSceneBuilder.cpp:  markers->setNodeMask(scene->getOceanScene()->getNormalSceneMask() | scene->getOceanScene()->getReflectedSceneMask() | scene->getOceanScene()->getRefractedSceneMask());
underwater_simulation/uwsim/src/ROSSceneBuilder.cpp:	scene->localizedWorld->removeChild(markerSearch->scene_node_->getParent(0));
underwater_simulation/uwsim/src/ROSSceneBuilder.cpp:  scene->localizedWorld->addChild(parent);
underwater_simulation/uwsim/src/ROSSceneBuilder.cpp:  marker->scene_node_->setNodeMask(scene->getOceanScene()->getNormalSceneMask() | scene->getOceanScene()->getReflectedSceneMask() | scene->getOceanScene()->getRefractedSceneMask());
underwater_simulation/uwsim/src/URDFRobot.cpp:          oscene->getNormalSceneMask() | oscene->getReflectedSceneMask() | oscene->getRefractedSceneMask());
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->setCullMask(~oscene->scene->getOceanScene()->getARMask());
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_EnableGlare", oscene->scene->getOceanScene()->isGlareEnabled()) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_EnableUnderwaterScattering", oscene->scene->getOceanScene()->isUnderwaterScatteringEnabled()) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_EnableDOF", oscene->scene->getOceanScene()->isUnderwaterDOFEnabled()) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    float UWFogDensity= oscene->scene->getOceanScene()->getUnderwaterFogDensity();
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_UnderwaterFogColor", oscene->scene->getOceanScene()->getUnderwaterFogColor() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    float AWFogDensity= oscene->scene->getOceanScene()->getAboveWaterFogDensity();
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_AboveWaterFogColor", oscene->scene->getOceanScene()->getAboveWaterFogColor() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_DOF_Near",  oscene->scene->getOceanScene()->getDOFNear() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_DOF_Far",  oscene->scene->getOceanScene()->getDOFFar() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_DOF_Focus",  oscene->scene->getOceanScene()->getDOFFocalDistance() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_DOF_Clamp",  oscene->scene->getOceanScene()->getDOFFarClamp() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_WaterHeight", float(oscene->scene->getOceanScene()->getOceanSurfaceHeight()) ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_UnderwaterAttenuation", oscene->scene->getOceanScene()->getUnderwaterAttenuation() ) );
underwater_simulation/uwsim/src/VirtualCamera.cpp:    textureCamera->getStateSet()->addUniform( new osg::Uniform("osgOcean_UnderwaterDiffuse", oscene->scene->getOceanScene()->getUnderwaterDiffuse() ) );
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableDistortion(false);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableGlare(false);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableUnderwaterDOF(false);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableUnderwaterScattering(false);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableReflections(false);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableRefractions(false);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableGodRays(false); // Could be done in fixed pipeline?
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->getOceanScene()->enableSilt(false); // Could be done in fixed pipeline?
underwater_simulation/uwsim/src/SceneBuilder.cpp:   scene->getOceanScene()->setDefaultSceneShader(program);
underwater_simulation/uwsim/src/SceneBuilder.cpp:  scene->getOceanScene()->setOceanSurfaceHeight(oceanSurfaceHeight);
underwater_simulation/uwsim/src/SceneBuilder.cpp:  scene->getOceanScene()->setUnderwaterFog(config.fogDensity,
underwater_simulation/uwsim/src/SceneBuilder.cpp:  scene->getOceanScene()->setUnderwaterDiffuse(osg::Vec4f(config.color[0], config.color[1], config.color[2], 1));
underwater_simulation/uwsim/src/SceneBuilder.cpp:  scene->getOceanScene()->setUnderwaterAttenuation(
underwater_simulation/uwsim/src/SceneBuilder.cpp:    scene->addObject(iauvFile[i]->baseTransform);
underwater_simulation/uwsim/src/SceneBuilder.cpp:    osg::Node *object = scene->addObject(wMb, auxObject.file, &auxObject);
underwater_simulation/uwsim/src/SceneBuilder.cpp:  root->addChild(scene->getScene());
underwater_simulation/uwsim/src/SceneBuilder.cpp:  //   iauv->lightSource->addChild(scene->getScene());	//Add vehicles light sources to the scene. Check if can be added to the .osg file.
underwater_simulation/uwsim/src/SceneBuilder.cpp:      iauvFile[j]->camview[i].textureCamera->addChild(scene->getScene());
underwater_simulation/uwsim/src/SceneBuilder.cpp:      iface = boost::shared_ptr < OceanSurfaceToROSOceanVehicle > (new OceanSurfaceToROSOceanVehicle(root, rosInterface.targetName, rosInterface.linkName, rosInterface.topic, rosInterface.rate, scene->getOceanScene()));
underwater_simulation/uwsim/src/SceneBuilder.cpp:          > (new ROSPointCloudLoader(rosInterface.topic,root,scene->getOceanScene()->getARMask(),rosInterface.del));
underwater_simulation/uwsim/src/SceneBuilder.cpp:        trajectory.timeWindow, root, scene->getOceanScene()->getARMask());
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    urdf(new URDFRobot(oscene->scene->getOceanScene(), vehicleChars))
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:        VirtualCamera(oscene->root, vcam.name, vcam.linkName, vMc, vcam.resw, vcam.resh, vcam.baseLine, vcam.frameId,
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:        VirtualCamera(oscene->root, vcam.name, vcam.linkName, vMc, vcam.resw, vcam.resh, vcam.baseLine, vcam.frameId,
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:      camview[camview.size() - 1].textureCamera->setCullMask(oscene->scene->getOceanScene()->getNormalSceneMask());
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    //camview.push_back(VirtualCamera(oscene->root, "slp_camera", vMp, 512, 512,slp.fov,102.4));
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    sls_projectors.push_back(VirtualSLSProjector(slp.name, slp.linkName, oscene->root, //maybe oscene->scene->localizedWorld ?
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:        VirtualRangeSensor(rs.name, rs.linkName, oscene->scene->localizedWorld, vMr, rs.range, (rs.visible) ? true : false,
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:        oscene->scene->getOceanScene()->getARMask()));
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    imus.push_back(InertialMeasurementUnit(imu.name, imu.linkName, vMi, oscene->scene->localizedWorld->getMatrix(), imu.std));
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    pressure_sensors.push_back(PressureSensor(ps.name, ps.linkName, vMs, oscene->scene->localizedWorld->getMatrix(), ps.std));
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    gps_sensors.push_back(GPSSensor(oscene->scene, ps.name, ps.linkName , vMs, oscene->scene->localizedWorld->getMatrix(), ps.std));
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    dvl_sensors.push_back(DVLSensor(ps.name, ps.linkName, vMs, oscene->scene->localizedWorld->getMatrix(), ps.std));
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:      mask=oscene->scene->getOceanScene()->getARMask();
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:      mask=oscene->scene->getOceanScene()->getNormalSceneMask(); //Normal Scene mask should be enough for range sensor
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    MultibeamSensor mb = MultibeamSensor(oscene->root, MB.name, MB.linkName, vMs, MB.initAngle, MB.finalAngle, MB.angleIncr,
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:    object_pickers.push_back(ObjectPicker(rs.name, oscene->scene->localizedWorld, vMr, rs.range, true, urdf,
underwater_simulation/uwsim/src/SimulatedIAUV.cpp:        oscene->scene->getOceanScene()->getARMask()));
underwater_simulation/uwsim/src/ROSInterface.cpp:   for(int i = 0; i < scene->iauvFile.size(); i++)
underwater_simulation/uwsim/src/ROSInterface.cpp:      if (!kdl_parser::treeFromFile(scene->iauvFile[i].get()->urdf->URDFFile, tree))
underwater_simulation/uwsim/src/ROSInterface.cpp:      findNodeVisitor findNode(scene->iauvFile[i].get()->name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      scene->root->accept(findNode);
underwater_simulation/uwsim/src/ROSInterface.cpp:   for( int i = 0; i < scene->iauvFile.size(); i++ )
underwater_simulation/uwsim/src/ROSInterface.cpp:      robot_pubs_[i]->RobotStatePublisher::publishTransforms(scene->iauvFile[i].get()->urdf->getFullJointMap(), getROSTime(), scene->iauvFile[i].get()->name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      robot_pubs_[i]->RobotStatePublisher::publishFixedTransforms(scene->iauvFile[i].get()->name,true);
underwater_simulation/uwsim/src/ROSInterface.cpp:         tf::StampedTransform t(pose, getROSTime(), "/" + worldRootName_, "/"+scene->iauvFile[i].get()->name);
underwater_simulation/uwsim/src/ROSInterface.cpp:         tf::StampedTransform t2(pose2, getROSTime(), "/"+scene->iauvFile[i].get()->name, "/"+scene->iauvFile[i].get()->name + "/base_link");
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->camview.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->camview[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          for(int k=0;k<scene->iauvFile[i].get()->multibeam_sensors.size();k++) //check if camera comes from multibeam
underwater_simulation/uwsim/src/ROSInterface.cpp:	    if(scene->iauvFile[i].get()->multibeam_sensors[k].name==scene->iauvFile[i].get()->camview[j].name)
underwater_simulation/uwsim/src/ROSInterface.cpp:            tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->camview[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->multibeam_sensors.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->multibeam_sensors[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->multibeam_sensors[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->imus.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->imus[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->imus[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->range_sensors.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->range_sensors[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->range_sensors[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->pressure_sensors.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->pressure_sensors[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->pressure_sensors[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->gps_sensors.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->gps_sensors[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->gps_sensors[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:      for(int j=0; j< scene->iauvFile[i].get()->dvl_sensors.size();j++)
underwater_simulation/uwsim/src/ROSInterface.cpp:        if(scene->iauvFile[i].get()->dvl_sensors[j].getTFTransform(pose,parent))
underwater_simulation/uwsim/src/ROSInterface.cpp:          tf::StampedTransform t(pose, getROSTime(),   "/"+scene->iauvFile[i].get()->name + "/" +parent, scene->iauvFile[i].get()->dvl_sensors[j].name);
underwater_simulation/uwsim/src/ROSInterface.cpp:     boost::shared_ptr<osg::Matrix> LWMat=getWorldCoords(scene->scene->localizedWorld);
underwater_simulation/uwsim/src/ROSInterface.cpp:     for(unsigned int i=0;i<scene->objects.size();i++)
underwater_simulation/uwsim/src/ROSInterface.cpp:       boost::shared_ptr<osg::Matrix> objectMat= getWorldCoords(scene->objects[i]);
underwater_simulation/uwsim/src/ROSInterface.cpp:       tf::StampedTransform t(pose2, getROSTime(),  "/" + worldRootName_, scene->objects[i]->getName());
underwater_simulation/uwsim/src/osgOceanScene.cpp:      _scene->addChild(lightSource);
underwater_simulation/uwsim/src/osgOceanScene.cpp:      _scene->addChild(_oceanScene.get());
underwater_simulation/uwsim/src/osgOceanScene.cpp:      //_scene->addChild( sunDebug(_sunPositions[CLOUDY]) );
underwater_simulation/uwsim/src/PhysicsBuilder.cpp:  physics = new BulletPhysics(config.physicsConfig, scene_builder->scene->getOceanSurface());
uwsim_osgbullet/examples/saverestore/saverestore.cpp:    scene->accept( fnn );
uwsim_osgbullet/src/osgbInteraction/DragHandler.cpp:        osg::Matrix p = _scene->getProjectionMatrix();
uwsim_osgbullet/src/osgbInteraction/DragHandler.cpp:        osg::Matrix v = _scene->getViewMatrix();
uwsim_osgbullet/src/osgbInteraction/DragHandler.cpp:        _scene->getViewMatrixAsLookAt( look, at, up );
uwsim_osgbullet/src/osgbInteraction/DragHandler.cpp:    osg::Viewport* vp = _scene->getViewport();
uwsim_osgbullet/src/osgbInteraction/DragHandler.cpp:    _scene->accept( intersectVisitor );
uwsim_osgbullet/src/osgbInteraction/DragHandler.cpp:    _scene->getViewMatrixAsLookAt( look, at, up );
uwsim_osgocean/include/OceanExample/SceneEventHandler.h:                      _scene->changeScene( Scene::CLEAR );
uwsim_osgocean/include/OceanExample/SceneEventHandler.h:                      _scene->changeScene( Scene::DUSK );
uwsim_osgocean/include/OceanExample/SceneEventHandler.h:                      _scene->changeScene( Scene::CLOUDY );
uwsim_osgocean/src/oceanExample/application.cpp:        shadowSettings->setLightNum(scene->getLight()->getLightNum());
uwsim_osgocean/src/oceanExample/application.cpp:            scene->getOceanScene()->setDefaultSceneShader(sceneProgram);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->getOceanTechnique()->setNodeMask(scene->getOceanScene()->getOceanTechnique()->getNodeMask() & ~CAST_SHADOW & ~RECEIVE_SHADOW);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->getOceanCylinder()->getParent(0)->setNodeMask(scene->getOceanScene()->getOceanCylinder()->getParent(0)->getNodeMask() & ~CAST_SHADOW & ~RECEIVE_SHADOW);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableDistortion(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableGlare(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableUnderwaterDOF(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableUnderwaterScattering(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableReflections(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableRefractions(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableGodRays(false);  // Could be done in fixed pipeline?
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableSilt(false);     // Could be done in fixed pipeline?
uwsim_osgocean/src/oceanExample/application.cpp:    scene->getOceanScene()->setOceanSurfaceHeight(oceanSurfaceHeight);
uwsim_osgocean/src/oceanExample/application.cpp:    root->addChild( scene->getScene() );
uwsim_osgocean/src/oceanExample/application.cpp:        loadedModel->setNodeMask( scene->getOceanScene()->getNormalSceneMask()    | 
uwsim_osgocean/src/oceanExample/application.cpp:                                  scene->getOceanScene()->getReflectedSceneMask() | 
uwsim_osgocean/src/oceanExample/application.cpp:                                  scene->getOceanScene()->getRefractedSceneMask() |
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->addChild(loadedModel.get());
uwsim_osgocean/src/oceanExample/application.cpp:            boat->setNodeMask( scene->getOceanScene()->getNormalSceneMask()    | 
uwsim_osgocean/src/oceanExample/application.cpp:                               scene->getOceanScene()->getReflectedSceneMask() | 
uwsim_osgocean/src/oceanExample/application.cpp:                               scene->getOceanScene()->getRefractedSceneMask() |
uwsim_osgocean/src/oceanExample/application.cpp:            boatTransform->setUpdateCallback( new BoatPositionCallback(scene->getOceanScene()) );
uwsim_osgocean/src/oceanExample/application.cpp:            scene->getOceanScene()->addChild(boatTransform.get());   
uwsim_osgocean/src/oceanExample/application.cpp:            scene->getOceanScene()->enableRTTEffectsForView(view2.get(), false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableGodRays(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableUnderwaterDOF(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableDistortion(false);
uwsim_osgocean/src/oceanExample/application.cpp:        scene->getOceanScene()->enableGlare(false);
uwsim_osgocean/src/oceanExample/application.cpp:    view->addEventHandler(scene->getOceanSceneEventHandler());
uwsim_osgocean/src/oceanExample/application.cpp:    view->addEventHandler(scene->getOceanSurface()->getEventHandler());
uwsim_osgocean/src/oceanExample/Scene.cpp:            _scene->addChild( lightSource );
uwsim_osgocean/src/oceanExample/Scene.cpp:            _scene->addChild( _oceanScene.get() );
uwsim_osgocean/src/oceanExample/Scene.cpp:            //_scene->addChild( sunDebug(_sunPositions[CLOUDY]) );
uwsim_osgworks/src/osgwMx/MxUtils.cpp:    const osg::BoundingSphere& bs = scene->getBound();
uwsim_osgworks/src/osgwMx/MxUtils.cpp:    const osg::BoundingSphere& bs = scene->getBound();
uwsim_osgworks/src/osgwMx/MxUtils.cpp:    scene->accept( intersectVisitor );
uwsim_osgworks/src/osgwMx/MxUtils.cpp:    const osg::BoundingSphere& bs = scene->getBound();
uwsim_osgworks/src/osgwMx/MxUtils.cpp:    const osg::BoundingSphere& bs = scene->getBound();
